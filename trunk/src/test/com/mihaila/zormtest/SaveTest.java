/*
 * Copyright (c) 2007 Cornel Mihaila (http://www.mihaila.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.package zutil;
 */

package com.mihaila.zormtest;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.mihaila.zorm.ZField;
import com.mihaila.zorm.ZSession;
import com.mihaila.zormtest.helper.Item;
import com.mihaila.zormtest.helper.ZormDbTest;


/**
 * Test the save functionality.
 */
public class SaveTest extends ZormDbTest {

	@Test
	/**
	 * Test <code>ZPersistent.save()</code> when the object is new.
	 */
	public void testSaveNew() {
		ZSession session = getSession();
		int numQueries = 0;
		Item item = session.getNew(Item.class);
		Assert.assertNotNull(item.getSession());
		Assert.assertTrue(item.isNew());
		item.setName("just'' a 'test");
		item.setActive(true);
		item.setAuthorId(null);
		item.save();
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		item.save();
		Assert.assertEquals(session.getNumQueries(), numQueries);
		Assert.assertFalse(item.isNew());
		String id = item.getId();
		item.dettach();
		item = (Item) session.get(Item.META, id, new ZField[] { Item.NAME,
				Item.ACTIVE, Item.AUTHOR_ID });
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		Assert.assertEquals(item.getName(), "just'' a 'test");
		Assert.assertEquals(item.isActive(), true);
		Assert.assertEquals(item.getAuthorId(), null);
	}

	@Test
	/**
	 * Test <code>ZPersistent.save()</code> when the object is new and by
	 * overwriting the autogenerated id.
	 */
	public void testSaveNewOverwriteId() {
		ZSession session = getSession();
		int numQueries = 0;
		Item item = session.getNew(Item.class);
		item.setId("1000");
		item.setName("test");
		item.setActive(true);
		item.setAuthorId(null);
		item.save();
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		item.dettach();
		item = (Item) session.get(Item.META, "1000", new ZField[] { Item.NAME,
				Item.ACTIVE, Item.AUTHOR_ID });
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		Assert.assertEquals(item.getName(), "test");
		Assert.assertEquals(item.isActive(), true);
		Assert.assertEquals(item.getAuthorId(), null);
	}

	@Test
	/**
	 * Test <code>ZPersistent.save()</code> when the object already existed.
	 */
	public void testSaveExisting() {
		ZSession session = getSession();
		int numQueries = 0;
		Item item = (Item) session.get(Item.META, "1");
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		Assert.assertEquals(item.getName(), "item1");
		Assert.assertEquals(item.getRating(), 2);
		Assert.assertEquals(item.getAuthorId(), "john");
		item.setName("just'' a 'test2");
		item.setRating(100);
		item.setAuthorId("alice2");
		item.save();
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		item.dettach();
		item = (Item) session.get(Item.META, "1");
		Assert.assertEquals(session.getNumQueries(), ++numQueries);
		Assert.assertEquals(item.getName(), "just'' a 'test2");
		Assert.assertEquals(item.getRating(), 100);
		Assert.assertEquals(item.getAuthorId(), "alice2");
	}

}
